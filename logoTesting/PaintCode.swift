//
//  PaintCode.swift
//  ProjectName
//
//  Created by parry on 2/19/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PaintCode : NSObject {

    //// Cache

    private struct Cache {
        static let baseColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    public dynamic class var baseColor: UIColor { return Cache.baseColor }

    //// Drawing Methods

    public dynamic class func drawCameraLogo(angle: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 46, y: 24, width: 133, height: 64), cornerRadius: 4)
        UIColor.black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 52, y: 13, width: 14, height: 27), cornerRadius: 4)
        UIColor.black.setFill()
        rectangle2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 92, y: 32, width: 47, height: 47))
        PaintCode.baseColor.setFill()
        oval3Path.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 80, y: 21, width: 69, height: 69))
        color.setFill()
        oval2Path.fill()


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 114.5, y: 55.5)
        context.rotate(by: -angle * CGFloat.pi/180)

        let symbolRect = CGRect(x: -40.5, y: -40.5, width: 81, height: 81)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        PaintCode.drawCameraLens(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()
    }

    public dynamic class func drawCameraLens(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 81, height: 81), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 81, height: 81), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 81, y: resizedFrame.height / 81)


        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color2 = UIColor(red: 0.128, green: 0.907, blue: 0.048, alpha: 1.000)
        let color5 = UIColor(red: 0.923, green: 1.000, blue: 0.000, alpha: 1.000)
        let color7 = UIColor(red: 0.714, green: 1.000, blue: 0.000, alpha: 1.000)
        let color8 = UIColor(red: 0.482, green: 1.000, blue: 0.000, alpha: 1.000)
        let color9 = UIColor(red: 0.000, green: 0.966, blue: 1.000, alpha: 1.000)
        let color10 = UIColor(red: 0.000, green: 0.644, blue: 1.000, alpha: 1.000)
        let color11 = UIColor(red: 1.000, green: 0.545, blue: 0.000, alpha: 1.000)
        let color12 = UIColor(red: 1.000, green: 0.292, blue: 0.000, alpha: 1.000)
        let color13 = UIColor(red: 0.997, green: 0.000, blue: 1.000, alpha: 1.000)
        let color14 = UIColor(red: 0.484, green: 0.000, blue: 1.000, alpha: 1.000)
        let color15 = UIColor(red: 0.000, green: 0.398, blue: 1.000, alpha: 1.000)
        let color16 = UIColor(red: 0.000, green: 0.411, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0.15, width: 81, height: 81))
        color2.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 6, y: 6, width: 69, height: 69))
        color.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 36, y: 6, width: 9, height: 9))
        color7.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 26, y: 8, width: 9, height: 9))
        color5.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 18, y: 13, width: 9, height: 9))
        color5.setFill()
        oval5Path.fill()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 20, width: 9, height: 9))
        color11.setFill()
        oval6Path.fill()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 7, y: 30, width: 9, height: 9))
        color11.setFill()
        oval7Path.fill()


        //// Oval 9 Drawing
        let oval9Path = UIBezierPath(ovalIn: CGRect(x: 46, y: 8, width: 9, height: 9))
        color8.setFill()
        oval9Path.fill()


        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 55, y: 13, width: 9, height: 9))
        color9.setFill()
        oval10Path.fill()


        //// Oval 13 Drawing
        let oval13Path = UIBezierPath(ovalIn: CGRect(x: 60, y: 22, width: 9, height: 9))
        color9.setFill()
        oval13Path.fill()


        //// Oval 15 Drawing
        let oval15Path = UIBezierPath(ovalIn: CGRect(x: 65, y: 31, width: 9, height: 9))
        color10.setFill()
        oval15Path.fill()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 36, y: 66, width: 9, height: 9))
        color14.setFill()
        oval8Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 26, y: 64, width: 9, height: 9))
        color13.setFill()
        oval11Path.fill()


        //// Oval 12 Drawing
        let oval12Path = UIBezierPath(ovalIn: CGRect(x: 18, y: 59, width: 9, height: 9))
        color13.setFill()
        oval12Path.fill()


        //// Oval 14 Drawing
        let oval14Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 52, width: 9, height: 9))
        color12.setFill()
        oval14Path.fill()


        //// Oval 16 Drawing
        let oval16Path = UIBezierPath(ovalIn: CGRect(x: 7, y: 42, width: 9, height: 9))
        color12.setFill()
        oval16Path.fill()


        //// Oval 17 Drawing
        let oval17Path = UIBezierPath(ovalIn: CGRect(x: 46, y: 64, width: 9, height: 9))
        color14.setFill()
        oval17Path.fill()


        //// Oval 18 Drawing
        let oval18Path = UIBezierPath(ovalIn: CGRect(x: 55, y: 59, width: 9, height: 9))
        color15.setFill()
        oval18Path.fill()


        //// Oval 19 Drawing
        let oval19Path = UIBezierPath(ovalIn: CGRect(x: 60, y: 50, width: 9, height: 9))
        color15.setFill()
        oval19Path.fill()


        //// Oval 20 Drawing
        let oval20Path = UIBezierPath(ovalIn: CGRect(x: 65, y: 41, width: 9, height: 9))
        color16.setFill()
        oval20Path.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
